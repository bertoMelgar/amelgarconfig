sockfile = "/home/amelgar/.awesome_ctl.0"

mpd { # not ready...
	# sequences:
	# $A : artist
	# $T : title
	# $L : album
	# $Y : year
	# $f : filename without path
	# $F : filename with path
	# $em : elapsed minutes
	# $es : elapsed seconds (mod 60) (123s = 2m:_3_s)
	# $eS : elapsed _total_ seconds (123s = 123s)
	# $tm : total minutes
	# $ts : total seconds (mod 60)
	# $tS : elapsed _total seconds
	# $pp : percent played ("elapsed percent")
	# $pr : percent remain ("remain percent")
	port = 6600
	host = localhost
	mpd_msg { 
		stop_msg = "STOPPED"
		pause_msg = "<< $A - $T >>"
		fallback = "$f ($em:$es/$tm:$ts)"
		msg { widget_name = "tb_mpd"
			widget_command = "text"
			message = "$A - $T ($em:$es/$tm:$ts)"
			sb_name = "sb_status"
		}	
	}	
}	

date { 
	# see 'man date' to sequences
	msg {
		sb_name	= "sb_system"
		widget_name = "tb_date"
		widget_command = ""
		message	= "%Y. %B %d, %A" 
	}
	msg {
		sb_name = "sb_system"
		widget_name = "tbclock"
		widget_command = ""
		message = "%H:%M:%S"
	}	
}	

snd {
	file = "/proc/asound/card0/codec97#0/ac97#0-0+regs"
	quickregs {
		reg = "0:5e" # register of output volume

		# if true then the program calculates
		# 	31-value 
		#	and send message in every 0.1 sec (if changed)
		# if false then the program calculates
		# 	value	
		#	and send message in every 1 sec
		# the true is output volume
		# the false is the channel's volume
		# I hope that on other system it works similar
		# sequences: $l - left, $r - right
		msg {
			widget_name = "pb_out_volume"
			widget_command = "data b_left_vol"
			message = "$l"
			sb_name = "sb_status"
		}
		msg {
			widget_name = "pb_out_volume"
			widget_command = "data b_right_vol"
			message = "$r"
			sb_name = "sb_status"
		}
	}
	slowregs {
		reg = "0:18" # pcm
		# sequences: $v - volume (the left speaker)
		msg {
			widget_name = "pb_volume_pcm"
			widget_command = "data d_vol_pcm"
			message = "$v"
			sb_name = "sb_tags"
		}
	}	
	slowregs {
		reg = "0:04" # master
		msg {
			widget_name = "pb_volume_master"
			widget_command = "data d_vol_master"
			message = "$v"
			sb_name = "sb_tags"
		}
	}	
}

cpu {
	file_stat = "/proc/stat"
	file_info = "/proc/cpuinfo"
	# Sequences: $cpu - cpu work in percent / from file_stat
	# above are from file_info -- not implemented yet!!!
	# $mhz - cpu's MHz
	# $bmps - cpu's bogomips
	# $vendor - vendor_id
	# $model - model name
	msg {
		sb_name = "sb_system"
		widget_name = "tb_cpu"
		widget_command = "text"
		message = "$cpu%"
	}
	msg {
		sb_name = "sb_system"
		widget_name = "gr_cpu"
		widget_command = "data d_cpu"
		message = "$cpu"
	}	
}	

sensors {
	# Sequences:
	# $V : value
	sensor {
		file = "/sys/devices/platform/it87.656/fan1_input"
		msg {
			sb_name = "sb_system"
			widget_name = "tb_cpu_fan"
			widget_command = "text"
			message = "$V"
		}	
	}
	sensor {
		file = "/sys/devices/platform/it87.656/fan2_input"
		msg {
			sb_name = "sb_system"
			widget_name = "tb_case_fan"
			widget_command = "text"
			message = "$V"
		}
	}	
	sensor {
		file = "/sys/devices/platform/it87.656/temp2_input"
		# divide by 1000
		div = 1000
		msg {
			sb_name = "sb_system"
			widget_name = "tb_cpu_temp"
			widget_command = "text"
			message = "$V°C"
		}
	}	
	sensor {
		file = "/sys/devices/platform/it87.656/temp1_input"
		div = 1000
		msg {
			sb_name = "sb_system"
			widget_name = "tb_mb_temp"
			widget_command = "text"
			message = "$V°C"
		}
	}	
	sensor {
		file = "/sys/devices/platform/it87.656/temp3_input"
		div = 1000
		msg {
			sb_name = "sb_system"
			widget_name = "tb_case_temp"
			widget_command = "text"
			message = "$V°C"
		}
	}	
}	

net {
	# Sequences:
	# $in_kbps : input (download) speed in kbps
	# $in_totalK : downloaded size in kb
	# $in_totalM : downloaded size in Mb
	#
	# $out_kbps : output (upload) speed in kbps
	# $out_totalK : uploaded size in kb
	# $out_totalM : uploaded size in Mb
	ifs {
		nif="wlan0"
		msg {
			sb_name = "tbredin"
			widget_name = "tbredin"
			widget_command = ""
			message = "$in_kbps/$out_kbps k/s"
		}	
		msg {
			sb_name = "sb_system"
			widget_name = "gr_net"
			widget_command = "data d_net_in"
			message = "$in_kbps"
		}	
		msg {
			sb_name = "sb_system"
			widget_name = "gr_net"
			widget_command = "data d_net_out"
			message = "$out_kbps"
		}	
	}	
}

mem {
	# sequences:
	# $memtotalK	- total memory in kb
	# $memtotalM	- total memory in Mb
	# $memfreeK	- free memory in kb
	# $memfreeM	- free memory in Mb
	# $memusedK	- used memory in kb
	# $memusedM	- used memory in Mb
	# $memfreep	- free memory in percent
	# $memusedp	- used memory in percent
	#
	# $swaptotalK	- total swap in kb
	# $swaptotalM	- total swap in Mb
	# $swapfreeK	- free swap in kb
	# $swapfreeM	- free swap in Mb
	# $swapusedK	- used swap in kb
	# $swapusedM	- used swap in Mb
	# $swapfreep	- free swap in percent
	# $swapusedp	- used swap in percent
	file = "/proc/meminfo"
	msg {
		message = "$memusedp%"
		sb_name = "sb_system"
		widget_command = "text"
		widget_name = "tb_mem"
	}
	msg {
		message = "$swapusedp%"
		sb_name = "sb_system"
		widget_command = "text"
		widget_name = "tb_swap"
	}
}

uptime { # Sequences:
	 # $D, $H, $M, $S : uptime date, hour, minute, second
	 # $TS,$TM,$TH : total second, minute, hour
	msg {
		message = "Uptime: $H:$M"
		sb_name = "sb_system"
		widget_command = "text"
		widget_name = "tb_uptime"
	}
}	
